
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import Database
from keyboards import get_epoch_keyboard, get_difficulty_keyboard, get_schedule_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Secrets –≤ Replit.")
    exit()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()
scheduler = AsyncIOScheduler()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await db.add_user(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —ç–ø–æ—Ö—É:",
        reply_markup=get_epoch_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–ø–æ—Ö–∏
@dp.callback_query(F.data.startswith("epoch_"))
async def process_epoch_choice(callback: CallbackQuery):
    epoch = callback.data.split("_")[1]
    start_year = {"ri": 1721, "ussr": 1922, "rf": 1991}[epoch]
    await db.update_user_preferences(callback.from_user.id, epoch, None, start_year)
    await callback.answer()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è:",
        reply_markup=get_difficulty_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
@dp.callback_query(F.data.startswith("diff_"))
async def process_difficulty_choice(callback: CallbackQuery):
    difficulty = callback.data.split("_")[1]
    user_data = await db.get_user_progress(callback.from_user.id)
    await db.update_user_preferences(callback.from_user.id, user_data['selected_epoch'], difficulty, user_data['start_year'])
    await callback.answer()
    await callback.message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?",
        reply_markup=get_schedule_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("schedule_"))
async def process_schedule_choice(callback: CallbackQuery):
    choice = callback.data.split("_")[1]
    await callback.answer()
    
    if choice == "yes":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        scheduler.add_job(
            send_history_fact,
            'cron',
            hour='9,14,19',
            args=[callback.from_user.id]
        )
        await callback.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å: –≤ 9:00, 14:00 –∏ 19:00."
        )
    else:
        await callback.message.answer(
            "–•–æ—Ä–æ—à–æ! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /fact –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
        )

from yandex_gpt import YandexGPT

gpt = YandexGPT()

async def send_history_fact(user_id: int):
    user_data = await db.get_user_progress(user_id)
    if not user_data:
        return
        
    fact = await gpt.generate_history_fact(
        epoch=user_data['selected_epoch'],
        year=user_data['current_year'],
        difficulty=user_data['difficulty_level']
    )
    
    await bot.send_message(
        user_id,
        f"üìö –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç:\n\n{fact}"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–∫—Ç–∞
    if user_data['current_year']:
        new_year = user_data['current_year'] + 1
        await db.update_current_year(user_id, new_year)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fact
@dp.message(Command("fact"))
async def send_fact_command(message: Message):
    await send_history_fact(message.from_user.id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await db.init()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
