import logging
import os
import signal
import sys
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import ErrorEvent
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import Database
from keyboards import (
    get_epoch_keyboard, 
    get_difficulty_keyboard, 
    get_schedule_keyboard,
    get_main_menu_keyboard,
    get_settings_keyboard,
    get_back_button,
    get_themes_keyboard
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
BOT_TOKEN = '7079040743:AAF89lKBLucf0_yoSFrS1F3UEpZ9kXbOoyU'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()
scheduler = AsyncIOScheduler()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await db.add_user(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —ç–ø–æ—Ö–∞—Ö.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —ç–ø–æ—Ö—É:",
        reply_markup=get_epoch_keyboard()
    )

@dp.message(Command("help"))
async def send_help(message: Message):
    help_text = (
        "ü§ñ *–ë–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏* ü§ñ\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏ –ø–æ —ç–ø–æ—Ö–∞–º –∏ —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–µ–ø–µ–Ω—å—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
        "‚Ä¢ /fact - –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç\n"
        "‚Ä¢ /settings - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ /progress - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ /help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —ç–ø–æ—Ö—É\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
        "3. –†–µ—à–∏—Ç–µ, –ø–æ–ª—É—á–∞—Ç—å –ª–∏ —Ñ–∞–∫—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
        "4. –ò–∑—É—á–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏!\n\n"
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /settings"
    )
    
    await message.answer(help_text, reply_markup=get_main_menu_keyboard())

@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç")
@dp.message(Command("fact"))
async def send_fact_command(message: Message):
    user_id = message.from_user.id
    user_data = await db.get_user_progress(user_id)
    
    if not user_data or not user_data['selected_epoch']:
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ —Å–µ–π—á–∞—Å!",
            reply_markup=get_epoch_keyboard()
        )
        return
    
    await send_history_fact(user_id)
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
    await db.increment_fact_counter(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Å—Ç
    facts_count = user_data['facts_viewed'] + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–≤–µ–ª–∏—á–∏–ª–∏ —Å—á–µ—Ç—á–∏–∫
    if facts_count % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç
        await message.answer(
            "–í—ã –∏–∑—É—á–∏–ª–∏ 5 –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?",
            reply_markup=get_test_keyboard()
        )

@dp.message(F.text == "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
@dp.message(Command("progress"))
async def show_progress(message: Message):
    user_id = message.from_user.id
    user_data = await db.get_user_progress(user_id)
    
    if not user_data or not user_data['selected_epoch']:
        await message.answer(
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏!",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ø–æ—Ö—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    epoch_text = {
        "ri": "–†–æ—Å—Å–∏–π—Å–∫–∞—è –ò–º–ø–µ—Ä–∏—è (1721-1917)",
        "ussr": "–°–°–°–† (1922-1991)",
        "rf": "–†–æ—Å—Å–∏—è (1991-–Ω–∞—Å—Ç.–≤—Ä.)"
    }.get(user_data['selected_epoch'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —ç–ø–æ—Ö–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    difficulty_text = {
        "basic": "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π",
        "medium": "–°—Ä–µ–¥–Ω–∏–π",
        "advanced": "–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π"
    }.get(user_data['difficulty_level'], "–ù–µ –≤—ã–±—Ä–∞–Ω")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —ç–ø–æ—Ö–∏
    progress_percent = 0
    total_years = 0
    
    if user_data['selected_epoch'] == "ri":
        total_years = 1917 - 1721
        progress_years = user_data['current_year'] - 1721
    elif user_data['selected_epoch'] == "ussr":
        total_years = 1991 - 1922
        progress_years = user_data['current_year'] - 1922
    elif user_data['selected_epoch'] == "rf":
        total_years = datetime.now().year - 1991
        progress_years = user_data['current_year'] - 1991
    
    if total_years > 0:
        progress_percent = min(100, max(0, (progress_years * 100) // total_years))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –≤–∏–¥–µ [‚ñ†‚ñ†‚ñ†‚ñ†‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°] XX%
    progress_bar_length = 10
    filled_blocks = progress_percent // 10
    progress_bar = '[' + '‚ñ†' * filled_blocks + '‚ñ°' * (progress_bar_length - filled_blocks) + ']'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    progress_message = (
        f"üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏* üìä\n\n"
        f"üî∑ *–≠–ø–æ—Ö–∞:* {epoch_text}\n"
        f"üî∑ *–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:* {difficulty_text}\n"
        f"üî∑ *–¢–µ–∫—É—â–∏–π –≥–æ–¥ –∏–∑—É—á–µ–Ω–∏—è:* {user_data['current_year']}\n"
        f"üî∑ *–ò–∑—É—á–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤:* {user_data['facts_viewed']}\n\n"
        f"*–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç–ø–æ—Ö–µ:* {progress_bar} {progress_percent}%\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏! –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –ø–æ–ª–Ω–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é —ç–ø–æ—Ö–∏."
    )
    
    await message.answer(progress_message, reply_markup=get_main_menu_keyboard())

@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@dp.message(Command("settings"))
async def show_settings(message: Message):
    user_id = message.from_user.id
    user_data = await db.get_user_progress(user_id)
    
    if not user_data:
        await db.add_user(user_id)
        user_data = await db.get_user_progress(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    epoch_text = "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
    if user_data['selected_epoch'] == "ri":
        epoch_text = "–†–æ—Å—Å–∏–π—Å–∫–∞—è –ò–º–ø–µ—Ä–∏—è (1721-1917)"
    elif user_data['selected_epoch'] == "ussr":
        epoch_text = "–°–°–°–† (1922-1991)"
    elif user_data['selected_epoch'] == "rf":
        epoch_text = "–†–æ—Å—Å–∏—è (1991-–Ω–∞—Å—Ç.–≤—Ä.)"
    
    difficulty_text = "–ù–µ –≤—ã–±—Ä–∞–Ω"
    if user_data['difficulty_level'] == "basic":
        difficulty_text = "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π"
    elif user_data['difficulty_level'] == "medium":
        difficulty_text = "–°—Ä–µ–¥–Ω–∏–π"
    elif user_data['difficulty_level'] == "advanced":
        difficulty_text = "–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π"
    
    schedule_text = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    if user_data['subscription_active']:
        schedule_text = "–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)"
    else:
        schedule_text = "–ü–æ –∑–∞–ø—Ä–æ—Å—É"
    
    settings_text = (
        f"‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏* ‚öôÔ∏è\n\n"
        f"üîπ *–≠–ø–æ—Ö–∞:* {epoch_text}\n"
        f"üîπ *–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:* {difficulty_text}\n"
        f"üîπ *–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤:* {schedule_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    await message.answer(settings_text, reply_markup=get_settings_keyboard())

@dp.callback_query(F.data == "settings_epoch")
async def change_epoch(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —ç–ø–æ—Ö—É:",
        reply_markup=get_epoch_keyboard(with_back=True)
    )
    await callback.answer()

@dp.callback_query(F.data == "settings_difficulty")
async def change_difficulty(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è:",
        reply_markup=get_difficulty_keyboard(with_back=True)
    )
    await callback.answer()

@dp.callback_query(F.data == "settings_schedule")
async def change_schedule(callback: CallbackQuery):
    await callback.message.edit_text(
        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?",
        reply_markup=get_schedule_keyboard(with_back=True)
    )
    await callback.answer()

@dp.callback_query(F.data == "settings_themes")
async def change_themes(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã –∏—Å—Ç–æ—Ä–∏–∏:",
        reply_markup=get_themes_keyboard(with_back=True)
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    await show_settings(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–ø–æ—Ö–∏
@dp.callback_query(F.data.startswith("epoch_"))
async def process_epoch_choice(callback: CallbackQuery):
    epoch = callback.data.split("_")[1]
    start_year = {"ri": 1721, "ussr": 1922, "rf": 1991}[epoch]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = await db.get_user_progress(callback.from_user.id)
    is_new_user = not user_data or not user_data['difficulty_level']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_new_user:
        await db.update_user_preferences(callback.from_user.id, epoch, None, start_year)
        await callback.answer()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=get_difficulty_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ø–æ—Ö—É
        await db.update_epoch(callback.from_user.id, epoch, start_year)
        await callback.answer("–≠–ø–æ—Ö–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        await show_settings(callback.message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
@dp.callback_query(F.data.startswith("diff_"))
async def process_difficulty_choice(callback: CallbackQuery):
    difficulty = callback.data.split("_")[1]
    user_data = await db.get_user_progress(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new_user = not user_data or not user_data['selected_epoch'] or 'subscription_active' not in user_data or not user_data['subscription_active']
    
    if is_new_user:
        await db.update_user_preferences(
            callback.from_user.id, 
            user_data['selected_epoch'], 
            difficulty, 
            user_data['start_year']
        )
        await callback.answer()
        await callback.message.edit_text(
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?",
            reply_markup=get_schedule_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        await db.update_difficulty(callback.from_user.id, difficulty)
        await callback.answer("–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        await show_settings(callback.message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("schedule_"))
async def process_schedule_choice(callback: CallbackQuery):
    choice = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    user_data = await db.get_user_progress(user_id)
    if not user_data or not user_data['selected_epoch'] or not user_data['difficulty_level']:
        text = "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —ç–ø–æ—Ö—É –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        await callback.message.edit_text(text, reply_markup=get_settings_keyboard())
        return

    subscription_active = choice == "yes"
    await db.update_subscription(user_id, subscription_active)
    
    if subscription_active:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        job_id = f"fact_schedule_{user_id}"
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        scheduler.remove_job(job_id, ignore_if_not_exists=True)
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        scheduler.add_job(
            send_history_fact,
            'cron',
            hour='9,14,19',
            args=[user_id],
            id=job_id,
            replace_existing=True
        )
        text = "–û—Ç–ª–∏—á–Ω–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å: –≤ 9:00, 14:00 –∏ 19:00."
    else:
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        scheduler.remove_job(f"fact_schedule_{user_id}", ignore_if_not_exists=True)
        text = "–•–æ—Ä–æ—à–æ! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user_data = await db.get_user_progress(callback.from_user.id)
    if not user_data.get('setup_completed', False):
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await db.mark_setup_completed(callback.from_user.id)
        text += "\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏."
        
    await callback.answer()
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await bot.send_message(
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

@dp.callback_query(F.data.startswith("theme_"))
async def process_theme_choice(callback: CallbackQuery):
    theme = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.toggle_theme(user_id, theme)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    selected_themes = await db.get_user_themes(user_id)
    
    await callback.answer(f"–¢–µ–º–∞ {'–¥–æ–±–∞–≤–ª–µ–Ω–∞' if theme in selected_themes else '—É–¥–∞–ª–µ–Ω–∞'}")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã –∏—Å—Ç–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_themes_keyboard(with_back=True, selected_themes=selected_themes)
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–∞
from yandex_gpt import YandexGPT

gpt = YandexGPT()

async def send_history_fact(user_id: int):
    user_data = await db.get_user_progress(user_id)
    if not user_data:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    selected_themes = await db.get_user_themes(user_id)
    
    fact = await gpt.generate_history_fact(
        epoch=user_data['selected_epoch'],
        year=user_data['current_year'],
        difficulty=user_data['difficulty_level'],
        themes=selected_themes  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–º—ã –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–∫—Ç–æ–≤
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–æ–º
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    fact_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ñ–∞–∫—Ç", callback_data="next_fact")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="open_settings")]
    ])
    
    await bot.send_message(
        user_id,
        f"üìö *–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç ({user_data['current_year']} –≥–æ–¥):*\n\n{fact}",
        reply_markup=fact_keyboard
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–∫—Ç–∞
    if user_data['current_year']:
        new_year = user_data['current_year'] + 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–ø–æ—Ö–∏
        if (user_data['selected_epoch'] == "ri" and new_year > 1917) or \
           (user_data['selected_epoch'] == "ussr" and new_year > 1991) or \
           (user_data['selected_epoch'] == "rf" and new_year > datetime.now().year):
            # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–º–µ–Ω–∏—Ç—å —ç–ø–æ—Ö—É
            await bot.send_message(
                user_id,
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å—é —ç–ø–æ—Ö—É {user_data['selected_epoch']}. "
                f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏–∑—É—á–µ–Ω–∏—é –¥—Ä—É–≥–æ–π —ç–ø–æ—Ö–∏?",
                reply_markup=get_epoch_keyboard()
            )
        else:
            await db.update_current_year(user_id, new_year)

@dp.callback_query(F.data == "next_fact")
async def send_next_fact(callback: CallbackQuery):
    await callback.answer("–ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–∫—Ç...")
    await send_fact_command(callback.message)

@dp.callback_query(F.data == "open_settings")
async def open_settings(callback: CallbackQuery):
    await callback.answer()
    await show_settings(callback.message)

def get_test_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")],
        [InlineKeyboardButton(text="‚ùå –ù–µ —Å–µ–π—á–∞—Å", callback_data="skip_test")]
    ])

@dp.callback_query(F.data == "start_test")
async def start_test(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = await db.get_user_progress(user_id)
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–ø–æ—Ö–∏ –∏ –≥–æ–¥–∞
    # –í –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
    
    epoch_text = {
        "ri": "–†–æ—Å—Å–∏–π—Å–∫–æ–π –ò–º–ø–µ—Ä–∏–∏",
        "ussr": "–°–°–°–†",
        "rf": "–†–æ—Å—Å–∏–∏"
    }.get(user_data['selected_epoch'], "")
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    year = user_data['current_year']
    
    test_question = f"–í–æ–ø—Ä–æ—Å –æ —Å–æ–±—ã—Ç–∏—è—Ö {epoch_text} –ø—Ä–∏–º–µ—Ä–Ω–æ {year} –≥–æ–¥–∞:\n\n"
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤)
    if user_data['selected_epoch'] == "ri":
        test_question += "–ö—Ç–æ –±—ã–ª –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –†–æ—Å—Å–∏–∏ –≤ –Ω–∞—á–∞–ª–µ XIX –≤–µ–∫–∞?"
        options = [
            ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä I", "correct_alexander1"],
            ["–ù–∏–∫–æ–ª–∞–π I", "wrong_nicholas1"],
            ["–ü–∞–≤–µ–ª I", "wrong_paul1"],
            ["–ü–µ—Ç—Ä III", "wrong_peter3"]
        ]
    elif user_data['selected_epoch'] == "ussr":
        test_question += "–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –°–°–°–† –≤ 1961 –≥–æ–¥—É?"
        options = [
            ["–ü–µ—Ä–≤—ã–π –ø–æ–ª–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ—Å–º–æ—Å", "correct_space"],
            ["–ö–∞—Ä–∏–±—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å", "wrong_caribbean"],
            ["–ù–∞—á–∞–ª–æ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã", "wrong_ww2"],
            ["–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞", "wrong_sputnik"]
        ]
    else:  # rf
        test_question += "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏?"
        options = [
            ["1993", "correct_1993"],
            ["1991", "wrong_1991"],
            ["2000", "wrong_2000"],
            ["1998", "wrong_1998"]
        ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    test_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=option[0], callback_data=option[1])] for option in options
    ])
    
    await callback.message.edit_text(
        f"üìù *–¢–µ—Å—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏* üìù\n\n{test_question}",
        reply_markup=test_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("correct_"))
async def process_correct_answer(callback: CallbackQuery):
    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ", show_alert=True)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.increment_correct_answers(callback.from_user.id)
    
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç–µ –∏—Å—Ç–æ—Ä–∏—é!\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ?",
        reply_markup=get_main_menu_keyboard()
    )

@dp.callback_query(F.data.startswith("wrong_"))
async def process_wrong_answer(callback: CallbackQuery):
    await callback.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    
    # –û—Ç–º–µ—á–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    await db.increment_wrong_answers(callback.from_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ callback.data
    correct_answer = ""
    if "alexander1" in callback.data:
        correct_answer = "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä I"
    elif "space" in callback.data:
        correct_answer = "–ü–µ—Ä–≤—ã–π –ø–æ–ª–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ—Å–º–æ—Å"
    elif "1993" in callback.data:
        correct_answer = "1993"
    
    await callback.message.edit_text(
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_answer}*\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!",
        reply_markup=get_main_menu_keyboard()
    )

@dp.callback_query(F.data == "skip_test")
async def skip_test(callback: CallbackQuery):
    await callback.answer("–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
    await callback.message.edit_text(
        "–í—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏!",
        reply_markup=get_main_menu_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
def signal_handler(sig, frame):
    print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram...")
    asyncio.run(bot.session.close())
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@dp.error()
async def error_handler(event: ErrorEvent):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"Update {event.update} caused error {event.exception}")
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ Telegram API
        if isinstance(event.exception, TelegramAPIError):
            if hasattr(event.update, 'message'):
                await event.update.message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    except Exception as e:
        logging.error(f"Error in error handler: {e}")

async def main():
    await db.init()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)
    
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")