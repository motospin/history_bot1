import os
import aiohttp
import random
from typing import Optional

class YandexGPT:
    def __init__(self):
        self.facts_db = {
            "ri": {  # Российская Империя
                1721: "Пётр I принял титул императора, Россия официально стала империей.",
                1755: "Основан Московский университет по инициативе М.В. Ломоносова.",
                1812: "Бородинское сражение - крупнейшая битва Отечественной войны.",
                1825: "Восстание декабристов на Сенатской площади.",
                1861: "Император Александр II отменил крепостное право в России.",
                1883: "Открыта первая в России электрическая железная дорога.",
                1905: "Первая русская революция, издание Манифеста 17 октября.",
                1914: "Россия вступила в Первую мировую войну.",
            },
            "ussr": {  # СССР
                1922: "Образован Союз Советских Социалистических Республик.",
                1928: "Начало первой пятилетки и индустриализации.",
                1934: "СССР вступил в Лигу Наций.",
                1941: "Начало Великой Отечественной войны.",
                1945: "Победа в Великой Отечественной войне.",
                1957: "Запущен первый искусственный спутник Земли.",
                1961: "Юрий Гагарин совершил первый полёт человека в космос.",
                1977: "Принята новая Конституция СССР - «брежневская».",
                1985: "Начало Перестройки при М.С. Горбачёве.",
            },
            "rf": {  # Российская Федерация
                1991: "Распад СССР и образование Российской Федерации.",
                1993: "Принята действующая Конституция РФ.",
                1998: "Дефолт и экономический кризис в России.",
                2000: "Владимир Путин впервые избран президентом России.",
                2006: "Россия полностью выплатила внешний долг СССР.",
                2014: "Присоединение Крыма к России.",
                2018: "Чемпионат мира по футболу в России.",
                2020: "Принятие поправок к Конституции РФ.",
            }
        }

    async def generate_history_fact(self, epoch: str, year: Optional[int], difficulty: str) -> str:
        if epoch not in self.facts_db:
            return "Извините, для данной эпохи факты отсутствуют."

        if year and year in self.facts_db[epoch]:
            return self.facts_db[epoch][year]

        # Если год не указан или для него нет факта, возвращаем случайный факт из эпохи
        available_facts = list(self.facts_db[epoch].values())
        return random.choice(available_facts)

    def _create_prompt(self, epoch: str, year: Optional[int], difficulty: str) -> str:
        pass  # Этот метод больше не используется